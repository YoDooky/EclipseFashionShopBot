from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from aiogram import Bot
from config.bot_config import ORDERS_CHAT_ID, QA_CHAT_ID

from telegram import markups


class OrderItem(StatesGroup):
    waiting_for_photo = State()
    waiting_for_question = State()


class UserMenu:
    def __init__(self, bot: Bot):
        self.bot = bot

    @staticmethod
    async def user_choice(call: types.CallbackQuery, state: FSMContext):
        await state.finish()
        keyboard = markups.get_user_menu()
        await call.message.edit_text(text='–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–º—è—Ç–∫—É –ø–æ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ '
                                          '–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º? üßê',
                                     reply_markup=keyboard)

    @staticmethod
    async def make_order(call: types.CallbackQuery, state: FSMContext):
        keyboard = markups.get_back_button()
        await call.message.edit_text(text='–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —Ç–æ–≤–∞—Ä–æ–º –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–º–µ—Ä. '
                                          '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...',
                                     reply_markup=keyboard)
        await state.set_state(OrderItem.waiting_for_photo.state)

    #  send user choice to 'ORDER' chat
    async def send_order(self, message: types.Message, state: FSMContext):
        photo_id = message.photo[-1].file_id
        if not message.caption:
            await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏, "
                                 "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
            return
        caption_text = f'–∏–º—è: {message.from_user.first_name}\n' \
                       f'–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.mention}\n' \
                       f'–¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞: {message.caption}'
        await self.bot.send_photo(ORDERS_CHAT_ID, photo_id, caption=caption_text)
        keyboard = markups.get_finish_order_button()
        await message.answer(text='–ù–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å", –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–æ—Ä',
                             reply_markup=keyboard)

    #  send user choice to 'QA' chat
    async def send_ask(self, message: types.Message, state: FSMContext):
        try:
            photo_id = message.photo[-1].file_id
        except Exception as ex:
            photo_id = None
            pass
        if not message.text and not message.caption:
            await message.answer("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ï—Å–ª–∏ –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, "
                                 "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –∫ –Ω–µ–π –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
            return
        question_text = message.text if not message.caption else message.caption
        caption_text = f'–∏–º—è: {message.from_user.first_name}\n' \
                       f'–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.mention}\n' \
                       f'–≤–æ–ø—Ä–æ—Å: {question_text}'
        if message.caption:
            await self.bot.send_photo(QA_CHAT_ID, photo_id, caption=caption_text)
        else:
            await self.bot.send_message(QA_CHAT_ID, caption_text)
        keyboard = markups.get_user_menu()
        await message.answer(text='–í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º. –° –í–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è',
                             reply_markup=keyboard)
        await state.finish()

    @staticmethod
    async def finish_order(message: types.Message, state: FSMContext):
        await state.finish()
        await message.answer(text='–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º üòé',
                             reply_markup=ReplyKeyboardRemove())
        keyboard = markups.get_user_menu()
        await message.answer(text='–° –í–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞',
                             reply_markup=keyboard)

    @staticmethod
    async def ask_question(call: types.CallbackQuery, state: FSMContext):
        keyboard = markups.get_back_button()
        await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å"',
                                     reply_markup=keyboard)
        await state.set_state(OrderItem.waiting_for_question.state)

    @staticmethod
    async def send_faq(call: types.CallbackQuery):
        keyboard = markups.get_back_button()
        await call.message.edit_text(text='üåóFAQüåó\n\n'
                                          '1) –ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º?\n'
                                          '–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Dewu –ª—é–±–æ–π —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –∏ '
                                          '–∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ @bot (—Å–∫–∏–¥—ã–≤–∞—è –µ–º—É '
                                          '—Å–∫—Ä–∏–Ω—à–æ—Ç, —É–∫–∞–∑–∞–≤ —Ä–∞–∑–º–µ—Ä)\n\n'
                                          '2) –û–ø–ª–∞—Ç–∞\n'
                                          '–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞—à–µ–º—É –±–æ—Ç—É –≤—Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫ —Å –≤–∞–º–∏ '
                                          '—Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Å—Ç–∞–≤–∏—Ç –≤–∞–º —Å—á–µ—Ç.\n'
                                          '–¶–µ–Ω–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ * –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—É—Ä—Å + –Ω–∞—à–∞ –Ω–∞—Ü–µ–Ω–∫–∞\n'
                                          '–ù–∞—Ü–µ–Ω–∫–∞ :\n –¥–æ 1000RMB —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ 200 RMB\n'
                                          '—Å 1000 –¥–æ 10 000 RMB –Ω–∞—Ü–µ–Ω–∫–∞ 15%\n'
                                          '–±–æ–ª–µ–µ 10 000 RMB –Ω–∞—Ü–µ–Ω–∫–∞ 10%\n'
                                          '–¢–∞–∫ –∂–µ –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Ç–æ–≥–æ –∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ—Å—ã–ª–∫–∞ '
                                          '–æ–±—ã—á–Ω–æ —Ü–µ–Ω–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 800—Ä.\n\n'
                                          '3) –î–æ—Å—Ç–∞–≤–∫–∞\n'
                                          '–û–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 20-30 –¥–Ω–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ '
                                          '–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.',
                                     reply_markup=keyboard)

    def register_handlers(self, dp: Dispatcher):
        """Register message handlers"""
        dp.register_callback_query_handler(self.user_choice, text='start_app')
        dp.register_callback_query_handler(self.make_order, text='make_order')
        dp.register_callback_query_handler(self.send_faq, text='faq')
        dp.register_callback_query_handler(self.ask_question, text='ask_question')
        dp.register_message_handler(self.send_order, content_types=['photo'], state=OrderItem.waiting_for_photo)
        dp.register_message_handler(self.send_ask, content_types=['photo', 'text'],
                                    state=OrderItem.waiting_for_question)
        dp.register_message_handler(self.finish_order, text='üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä', state='*')
        dp.register_callback_query_handler(self.user_choice, text='back_menu', state='*')
